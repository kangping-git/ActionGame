"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
let canvas;
let ctx;
let stylesheet;
let w;
let h;
let blockWight;
let map;
let playerX;
let playerY;
let playerDx;
let playerDy;
let lastFrame;
let gravity;
let key;
let cameraX;
let mapName;
window.addEventListener("load", (e) => {
    function init() {
        return __awaiter(this, void 0, void 0, function* () {
            mapName = "map1";
            map = (yield (yield fetch("./maps/" + mapName + ".gmap")).text()).split(/\n|\r/).filter((v) => v);
            w = window.innerWidth * window.devicePixelRatio;
            h = window.innerHeight * window.devicePixelRatio;
            playerX = Number(map[21]);
            playerY = Number(map[22]);
            playerDx = 0;
            playerDy = 0;
            cameraX = 0;
            gravity = 50;
            lastFrame = new Date();
            blockWight = h / 20;
            key = {
                Space: false,
                ArrowUp: false,
                ArrowDown: false,
                ArrowLeft: false,
                ArrowRight: false,
            };
            canvas = document.createElement("canvas");
            canvas.width = w;
            canvas.height = h;
            document.body.appendChild(canvas);
            let _ctx = canvas.getContext("2d");
            if (!_ctx) {
                alert("ERROR:このブラウザでは使用できません");
                return;
            }
            ctx = _ctx;
            stylesheet = document.createElement("link");
            stylesheet.href = "./index.css";
            stylesheet.rel = "stylesheet";
            document.head.appendChild(stylesheet);
            tick();
        });
    }
    function getMap(x, y) {
        try {
            return map[y][x];
        }
        catch (e) {
            return ".";
        }
    }
    function tick() {
        return __awaiter(this, void 0, void 0, function* () {
            requestAnimationFrame(tick);
            ctx.clearRect(0, 0, w, h);
            ctx.fillStyle = "cyan";
            ctx.fillRect(0, 0, w, h);
            ctx.fillStyle = "blue";
            ctx.fillRect(playerX * blockWight - cameraX, playerY * blockWight, blockWight, blockWight);
            for (let y = 0; y < 20; ++y) {
                for (let x = 0; x < map[0].length; ++x) {
                    if (getMap(x, y) == "#") {
                        ctx.fillStyle = "green";
                        ctx.fillRect(x * blockWight - cameraX, y * blockWight, blockWight, blockWight);
                    }
                    else {
                        if (getMap(x, y) == "M") {
                            ctx.fillStyle = "red";
                            ctx.fillRect(x * blockWight - cameraX, y * blockWight, blockWight, blockWight);
                        }
                        else {
                            if (getMap(x, y) == "G") {
                                ctx.fillStyle = "blue";
                                ctx.fillRect(x * blockWight - cameraX, y * blockWight, blockWight, blockWight);
                            }
                        }
                    }
                }
            }
            if (w / 2 < playerX * blockWight && playerX * blockWight < map[0].length * blockWight - w / 2) {
                cameraX = playerX * blockWight - w / 2;
            }
            else {
                if (w / 2 > playerX * blockWight) {
                    cameraX = 0;
                }
                else {
                    cameraX = map[0].length * blockWight - w;
                }
            }
            if (getMap(Math.ceil(playerX + (playerDx * (new Date().getTime() - lastFrame.getTime())) / 1000), Math.ceil(playerY)) == "#" ||
                getMap(Math.floor(playerX + (playerDx * (new Date().getTime() - lastFrame.getTime())) / 1000), Math.ceil(playerY)) == "#") {
                if (getMap(Math.floor(playerX + (playerDx * (new Date().getTime() - lastFrame.getTime())) / 1000), Math.ceil(playerY)) == "#") {
                    playerX = Math.ceil(playerX + (playerDx * (new Date().getTime() - lastFrame.getTime())) / 1000);
                }
                else {
                    playerX = Math.floor(playerX + (playerDx * (new Date().getTime() - lastFrame.getTime())) / 1000);
                }
                playerDx = 0;
            }
            playerX += (playerDx * (new Date().getTime() - lastFrame.getTime())) / 1000;
            playerY += (playerDy * (new Date().getTime() - lastFrame.getTime())) / 1000;
            playerDy += ((new Date().getTime() - lastFrame.getTime()) / 1000) * gravity;
            if (getMap(Math.ceil(playerX), Math.ceil(playerY)) == "#" ||
                getMap(Math.floor(playerX), Math.ceil(playerY)) == "#" ||
                getMap(Math.ceil(playerX), Math.floor(playerY)) == "#" ||
                getMap(Math.floor(playerX), Math.floor(playerY)) == "#") {
                if (getMap(Math.ceil(playerX), Math.ceil(playerY)) == "#" ||
                    getMap(Math.floor(playerX), Math.ceil(playerY)) == "#") {
                    playerDy = 0;
                    playerY = Math.ceil(playerY) - 1;
                    if (key.ArrowUp) {
                        playerDy = -20;
                    }
                }
                else {
                    playerDy *= -1;
                    playerY = Math.ceil(playerY);
                }
            }
            if (getMap(Math.ceil(playerX), Math.ceil(playerY)) == "M" ||
                getMap(Math.floor(playerX), Math.ceil(playerY)) == "M" ||
                getMap(Math.ceil(playerX), Math.floor(playerY)) == "M" ||
                getMap(Math.floor(playerX), Math.floor(playerY)) == "M") {
                playerX = Number(map[21]);
                playerY = Number(map[22]);
                playerDx = 0;
                playerDy = 0;
            }
            if (getMap(Math.ceil(playerX), Math.ceil(playerY)) == "G" ||
                getMap(Math.floor(playerX), Math.ceil(playerY)) == "G" ||
                getMap(Math.ceil(playerX), Math.floor(playerY)) == "G" ||
                getMap(Math.floor(playerX), Math.floor(playerY)) == "G") {
                mapName = map[20];
                map = (yield (yield fetch("./maps/" + mapName + ".gmap")).text()).split(/\n|\r/).filter((v) => v);
                playerX = Number(map[21]);
                playerY = Number(map[22]);
                playerDx = 0;
                playerDy = 0;
            }
            if (key.ArrowRight) {
                playerDx = 10;
            }
            else {
                if (key.ArrowLeft) {
                    playerDx = -10;
                }
                else {
                    playerDx *= Math.pow(0.0001, (new Date().getTime() - lastFrame.getTime()) / 1000);
                }
            }
            lastFrame = new Date();
            if (playerY > 25) {
                playerX = Number(map[21]);
                playerY = Number(map[22]);
                playerDx = 0;
                playerDy = 0;
            }
        });
    }
    init();
});
window.addEventListener("resize", () => {
    w = window.innerWidth * window.devicePixelRatio;
    h = window.innerHeight * window.devicePixelRatio;
    canvas.width = w;
    canvas.height = h;
    blockWight = h / 20;
});
window.addEventListener("keydown", (e) => {
    switch (e.key) {
        case " ":
            key.Space = true;
            break;
        case "ArrowDown":
            key.ArrowDown = true;
            break;
        case "ArrowUp":
            key.ArrowUp = true;
            break;
        case "ArrowRight":
            key.ArrowRight = true;
            break;
        case "ArrowLeft":
            key.ArrowLeft = true;
            break;
    }
});
window.addEventListener("keyup", (e) => {
    switch (e.key) {
        case " ":
            key.Space = false;
            break;
        case "ArrowDown":
            key.ArrowDown = false;
            break;
        case "ArrowUp":
            key.ArrowUp = false;
            break;
        case "ArrowRight":
            key.ArrowRight = false;
            break;
        case "ArrowLeft":
            key.ArrowLeft = false;
            break;
    }
});
